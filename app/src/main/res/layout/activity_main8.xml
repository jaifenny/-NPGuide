<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#F0FFF0"
    tools:context=".MainActivity8">

    <ScrollView
        android:layout_width="400dp"
        android:layout_height="550dp"
        android:layout_marginStart="4dp"
        android:layout_marginTop="60dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" >

            <TextView
                android:id="@+id/textView11"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="20sp"
                android:text="Vertex Cover problem\n一張無向圖上，挑選數個點，碰觸到所有邊，這些點就叫做一個「點覆蓋」，可能有許多種。換句話說，每一條邊，都會碰觸到一個以上的選定點。" />

            <ImageView
                android:id="@+id/imageView9"
                android:layout_width="match_parent"
                android:layout_height="280dp"
                app:srcCompat="@drawable/vertex0" />

            <TextView
                android:id="@+id/textView12"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="20sp"
                android:text="\n指的是給定一個N個點，M條邊的無向圖G（點的編號從1至N），問是否存在一個不超過K個點的集合S，使得G中的每條邊都至少有一個點在集合S中。\n解釋這個問題，N個點，M條邊的無向圖，每次去掉一個點以及該點相鄰的邊，直到把所有的邊都去掉。一個可能的過程如下，紅色為待去除的點：" />

            <ImageView
                android:id="@+id/imageView10"
                android:layout_width="match_parent"
                android:layout_height="200dp"
                app:srcCompat="@drawable/vertex1" />

            <ImageView
                android:id="@+id/imageView11"
                android:layout_width="match_parent"
                android:layout_height="200dp"
                app:srcCompat="@drawable/vertex2" />

            <ImageView
                android:id="@+id/imageView12"
                android:layout_width="match_parent"
                android:layout_height="200dp"
                app:srcCompat="@drawable/vertex3" />

            <ImageView
                android:id="@+id/imageView13"
                android:layout_width="match_parent"
                android:layout_height="200dp"
                app:srcCompat="@drawable/vertex4" />

            <TextView
                android:id="@+id/textView13"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="20sp"
                android:text="\n首先每次找到當前情況下度數最大的點來刪除未必能夠得到最優解，反例如下圖，如果開始就去掉度最多的最中間的點，那麼就得不到最優解了：" />

            <ImageView
                android:id="@+id/imageView14"
                android:layout_width="match_parent"
                android:layout_height="250dp"
                app:srcCompat="@drawable/vertex5" />

            <TextView
                android:id="@+id/textView14"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="20sp"
                android:text="\n但是每次都嘗試當前度最高的點在很多情況下的確能夠幫助盡快找到最優解。其次，如果按照對於某個點選擇，不選擇情況分別進行處理，則算法需要耗費大量的時間，最壞時候要嘗試近2^n種情況。\n\n影片教學" />


            <TextView
                android:id="@+id/textView28"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:autoLink="web"
                android:text="@string/link_vertex"
                android:textSize="15sp"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                tools:ignore="TouchTargetSizeCheck" />

            <TextView
                android:id="@+id/textView45"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="\n\n" />
        </LinearLayout>
    </ScrollView>
</androidx.constraintlayout.widget.ConstraintLayout>